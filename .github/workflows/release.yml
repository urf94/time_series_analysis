name: Build and Release Package

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 트리거

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install Poetry
      run: pip install poetry

    - name: Get version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(poetry version -s)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Check if tag exists remotely
      id: check_tag_exists
      run: |
        if git ls-remote --tags origin | grep "refs/tags/v${{ env.VERSION }}" >/dev/null 2>&1; then
          echo "TAG_EXISTS=true" >> $GITHUB_ENV
        else
          echo "TAG_EXISTS=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Create Git tag
      if: env.TAG_EXISTS == 'false'
      env:
        PAT_TOKEN: ${{ secrets.URF_PAT }}  # URF_PAT 사용
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag v${{ env.VERSION }}
        git push https://${{ secrets.URF_PAT }}@github.com/urf94/time_series_analysis.git v${{ env.VERSION }}

    - name: Install dependencies
      run: poetry install --no-dev

    - name: Build package
      run: poetry build

    - name: List build artifacts
      run: ls -al ./dist

    - name: Get WHL file name
      id: get_whl_name
      run: echo "WHL_NAME=$(ls ./dist/*.whl)" >> $GITHUB_ENV

    - name: Rename WHL file
      run: |
        WHL_FILE=$(ls ./dist/*.whl)
        if [[ "$WHL_FILE" == *default.dist* ]]; then
          mv "$WHL_FILE" "./dist/time_series_analysis-0.1.4-py3-none-any.whl"
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.URF_PAT }}  # URF_PAT 사용
      with:
        tag_name: v${{ env.VERSION }}
        release_name: v${{ env.VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.URF_PAT }}  # URF_PAT 사용
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.WHL_NAME }}
        asset_name: ${{ env.WHL_NAME }}
        asset_content_type: application/zip
